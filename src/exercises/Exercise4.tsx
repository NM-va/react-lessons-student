import React from 'react';

const HomeworkAssignment: React.FC = () => {
  return (
    <div className="homework-content">
      <h1>Домашнее задание: Составной компонент DataDetail с формой</h1>

      <p>
        В этом задании вам предстоит создать составной компонент <code>DataDetail</code>, который будет
        реализовывать концепции составных компонентов, слотов, контекста и императивного API.
      </p>

      <h2>Цель задания:</h2>
      <p>
        Разработать составной компонент <code>DataDetail</code>, который:
      </p>
      <ol>
        <li>Имеет четкую структуру с выделенными частями (header, body, footer, actions)</li>
        <li>Использует контекст для обмена данными между подкомпонентами</li>
        <li>Предоставляет императивный API для управления компонентом извне</li>
        <li>Интегрируется с имеющимся контекстом темы (useThemeColor)</li>
        <li>Поддерживает форму внутри с использованием <code>UniversalInput</code> из предыдущего задания</li>
      </ol>

      <h2>Базовый уровень (обязательно):</h2>
      <ol>
        <li>
          <strong>Структура составного компонента</strong>:
          <ul>
            <li><code>DataDetail</code> - основной компонент</li>
            <li><code>DataDetail.Header</code> - заголовок с возможностью сворачивания/разворачивания</li>
            <li><code>DataDetail.Body</code> - основное содержимое</li>
            <li><code>DataDetail.Footer</code> - нижняя часть с действиями</li>
            <li><code>DataDetail.Actions</code> - дополнительные действия в заголовке</li>
          </ul>
        </li>
        <li>
          <strong>Контекст</strong>:
          <ul>
            <li>Создайте контекст <code>DataDetailContext</code> для обмена данными между подкомпонентами</li>
            <li>Реализуйте кастомный хук <code>useDataDetail()</code> для доступа к контексту</li>
            <li>Контекст должен содержать как минимум состояние развернутости и функцию переключения</li>
          </ul>
        </li>
        <li>
          <strong>Императивный API</strong>:
          <ul>
            <li>Используйте <code>forwardRef</code> и <code>useImperativeHandle</code> для создания API</li>
            <li>Реализуйте методы: <code>open()</code>, <code>close()</code>, <code>toggle()</code> и <code>isOpen()</code></li>
            <li>API должен быть доступен через ref, переданный в компонент</li>
          </ul>
        </li>
        <li>
          <strong>Интеграция с темой</strong>:
          <ul>
            <li>Используйте хук <code>useThemeColor()</code> для стилизации компонента</li>
            <li>Реализуйте поддержку светлой и темной темы</li>
          </ul>
        </li>
        <li>
          <strong>Базовая стилизация</strong>:
          <ul>
            <li>Создайте базовые стили для компонента с использованием CSS или CSS-in-JS</li>
            <li>Реализуйте плавные анимации сворачивания/разворачивания</li>
          </ul>
        </li>
      </ol>

      <h2>Продвинутый уровень (по желанию):</h2>
      <ol>
        <li>
          <strong>Улучшенная форма</strong>:
          <ul>
            <li>Интегрируйте <code>UniversalInput</code> из предыдущего задания</li>
            <li>Реализуйте валидацию полей формы</li>
            <li>Добавьте метод <code>resetForm()</code> в императивный API</li>
          </ul>
        </li>
        <li>
          <strong>Слоты</strong>:
          <ul>
            <li>Реализуйте поддержку слотов для более гибкой структуры компонента</li>
            <li>Добавьте поддержку слотов по умолчанию (fallback)</li>
            <li>Создайте механизм для замены стандартных компонентов на пользовательские</li>
          </ul>
        </li>
        <li>
          <strong>Расширенный контекст</strong>:
          <ul>
            <li>Добавьте поддержку вложенных DataDetail компонентов</li>
            <li>Реализуйте передачу состояния между родительским и дочерними компонентами</li>
            <li>Добавьте возможность контролировать состояние компонента извне через пропсы</li>
          </ul>
        </li>
        <li>
          <strong>Анимации и переходы</strong>:
          <ul>
            <li>Добавьте плавные анимации при раскрытии/сворачивании компонента</li>
            <li>Реализуйте переходы между разными состояниями формы</li>
            <li>Добавьте анимации для уведомлений об ошибках валидации</li>
          </ul>
        </li>
        <li>
          <strong>Дополнительные возможности</strong>:
          <ul>
            <li>Добавьте поддержку "виртуальных" полей формы (вычисляемые значения)</li>
            <li>Реализуйте поддержку пошаговых форм (wizard)</li>
            <li>Добавьте функционал сохранения черновика и истории изменений</li>
          </ul>
        </li>
      </ol>

      <h2>Критерии оценки:</h2>
      <ul>
        <li>Корректное использование паттерна составных компонентов</li>
        <li>Правильное использование контекста и кастомных хуков</li>
        <li>Реализация императивного API через useImperativeHandle</li>
        <li>Интеграция с контекстом темы</li>
        <li>Чистота и структура кода</li>
        <li>Адекватная стилизация и анимация</li>
        <li>Дополнительные баллы за реализацию продвинутого уровня</li>
      </ul>

      <h2>Сроки и формат сдачи:</h2>
      <p>
        Выполненное задание должно быть представлено в виде:
      </p>
      <ul>
        <li>Исходного кода компонента DataDetail и всех связанных файлов</li>
        <li>Примера использования компонента в реальном приложении</li>
        <li>Краткого описания решения и принятых архитектурных решений</li>
      </ul>
      <p>
        Срок сдачи: до следующего занятия.
      </p>

      <div className="tip-box">
        <h3>Советы:</h3>
        <p>
          При выполнении задания обратите внимание на:
        </p>
        <ul>
          <li>Типизацию всех компонентов и контекста с использованием TypeScript</li>
          <li>Документирование API компонентов</li>
          <li>Повторное использование логики через кастомные хуки</li>
          <li>Тестируемость компонентов</li>
          <li>Доступность (a11y) компонентов для пользователей с ограниченными возможностями</li>
        </ul>
      </div>
    </div>
  );
};

export default HomeworkAssignment;